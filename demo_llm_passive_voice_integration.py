#!/usr/bin/env python3
"""
Demo script showing LLM-enhanced passive voice suggestions in the Doc Scanner.
This demonstrates the integration of AI-powered active voice rewrites.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

def demo_web_app_integration():
    """Demonstrate how the LLM integration works in the web app."""
    print("=" * 70)
    print("DOC SCANNER: LLM-ENHANCED PASSIVE VOICE DEMO")
    print("=" * 70)
    
    print("\nThis demo shows how the Doc Scanner now uses AI to provide")
    print("natural, actionable suggestions for passive voice improvements.")
    
    # Sample documents that would be processed by the web app
    sample_documents = [
        {
            "title": "Technical Documentation",
            "content": "This tool is needed to complete the installation. The configuration file was created by the system automatically. Settings are configured through the admin panel."
        },
        {
            "title": "User Guide",
            "content": "Passwords are required to access the system. Data is processed using advanced algorithms. The report was generated by the application."
        },
        {
            "title": "Project Report", 
            "content": "The software was developed over six months. New features are being implemented weekly. The database has been optimized for better performance."
        }
    ]
    
    try:
        from rules.passive_voice import check
        
        for i, doc in enumerate(sample_documents, 1):
            print(f"\n{'-' * 50}")
            print(f"DOCUMENT {i}: {doc['title']}")
            print(f"{'-' * 50}")
            print(f"Content: {doc['content']}")
            print("\nAI-Enhanced Suggestions:")
            
            suggestions = check(doc['content'])
            
            if suggestions:
                for j, suggestion in enumerate(suggestions, 1):
                    print(f"\n{j}. {suggestion}")
                    print()
            else:
                print("No passive voice issues detected.")
                
        print("\n" + "=" * 70)
        print("DEMO COMPLETE")
        print("=" * 70)
        
        print("\nKey Improvements:")
        print("✓ LLM provides natural, human-like active voice rewrites")
        print("✓ Fallback to pattern-based logic when LLM unavailable") 
        print("✓ Structured suggestions (Issue, Original sentence, AI suggestion)")
        print("✓ Context-aware actor selection (you, the user, the system, etc.)")
        print("✓ Handles complex passive constructions beyond basic patterns")
        
        print("\nTo use in the web application:")
        print("1. Start the Doc Scanner: python run.py")
        print("2. Open browser to http://127.0.0.1:5000")
        print("3. Paste text with passive voice")
        print("4. Click 'Analyze Document' to see AI-enhanced suggestions")
        
    except ImportError as e:
        print(f"\nError importing modules: {e}")
        print("Make sure you're running from the doc-scanner directory.")
    except Exception as e:
        print(f"\nError during demo: {e}")
        
def show_llm_setup_instructions():
    """Show setup instructions for LLM integration."""
    print("\n" + "=" * 70)
    print("LLM SETUP INSTRUCTIONS")
    print("=" * 70)
    
    print("\nFor best results with AI-enhanced suggestions:")
    print("\n1. Install Ollama (recommended):")
    print("   - Download from: https://ollama.ai")
    print("   - Install and start Ollama")
    print("   - Pull a model: ollama pull mistral-7b-instruct")
    
    print("\n2. Alternative: The system will work without LLM")
    print("   - Uses enhanced pattern-based logic as fallback")
    print("   - Still provides good active voice suggestions")
    
    print("\n3. Dependencies check:")
    print("   pip install ollama spacy beautifulsoup4")
    print("   python -m spacy download en_core_web_sm")
    
    print("\n4. Test the setup:")
    print("   python test_llm_enhanced_passive_voice.py")

if __name__ == "__main__":
    demo_web_app_integration()
    show_llm_setup_instructions()
