#!/usr/bin/env python3
"""
Test the fixed AI suggestion system
"""
import sys
sys.path.append('app')

from app.ai_improvement import AISuggestionEngine

def test_ai_suggestions():
    engine = AISuggestionEngine()
    
    print("üß™ Testing Fixed AI Suggestion System")
    print("=" * 50)
    
    # Test cases that were previously returning "(revised)"
    test_cases = [
        {
            "feedback": "Avoid passive voice in sentence",
            "sentence": "The configuration options of the data source are displayed.",
            "description": "Passive voice issue"
        },
        {
            "feedback": "Avoid using ALL CAPS for emphasis. Use bold or italics instead.",
            "sentence": "The configuration of SIMATIC S7+ Connector offers flexibility through manual configuration or file importation.",
            "description": "ALL CAPS issue"
        },
        {
            "feedback": "Avoid adverb overuse",
            "sentence": "You can easily configure the system settings.",
            "description": "Adverb overuse"
        },
        {
            "feedback": "Use active voice instead of passive",
            "sentence": "The logs are generated by the system.",
            "description": "Passive to active conversion"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç Test {i}: {test_case['description']}")
        print(f"üìù Original: {test_case['sentence']}")
        print(f"‚ö†Ô∏è  Issue: {test_case['feedback']}")
        
        # Test with issue format (simulating real usage)
        issue = {
            "message": test_case["feedback"],
            "context": test_case["sentence"],
            "issue_type": "Writing Issue"
        }
        
        try:
            result = engine.generate_contextual_suggestion(
                feedback_text=test_case["feedback"],
                sentence_context=test_case["sentence"],
                document_type="technical",
                issue=issue
            )
            
            suggestion = result.get("suggestion", "No suggestion")
            method = result.get("method", "unknown")
            
            print(f"‚úÖ Suggestion: {suggestion}")
            print(f"üîß Method: {method}")
            
            # Check if it's just adding "(revised)" - this should not happen anymore
            if "(revised)" in suggestion.lower():
                print("‚ùå FAILED: Still returning '(revised)' - fix didn't work!")
            elif suggestion == test_case["sentence"]:
                print("‚ùå FAILED: Returning original sentence unchanged!")
            elif "Revise for clarity:" in suggestion:
                print("‚ö†Ô∏è  WARNING: Using generic fallback")
            else:
                print("‚úÖ SUCCESS: Meaningful suggestion generated!")
                
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
    
    print("\n" + "=" * 50)
    print("üèÅ Test Complete")

if __name__ == "__main__":
    test_ai_suggestions()
