"""
Real Document Testing Utility
Test the RAG system with actual documents and see comprehensive suggestions.
"""

import sys
import os

# Add the app directory to the path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

def test_with_sample_documents():
    """Test the RAG system with various document types."""
    
    print("üìÑ Testing RAG System with Real Documents\n")
    
    # Import the RAG system
    try:
        from app.rules.rag_main import get_rag_suggestion, is_rag_available
        if not is_rag_available():
            print("‚ùå RAG system not available")
            return
    except Exception as e:
        print(f"‚ùå Error importing RAG system: {e}")
        return
    
    # Sample documents with various issues
    test_documents = [
        {
            "title": "Technical Documentation",
            "content": """
            # API Documentation
            
            The API's are designed to be RESTful. In order to get started, you will need to 
            configure the endpoints. The implementation of the authentication was done by our team.
            
            Authentication tokens are generated by the server, they expire after 24 hours.
            Each endpoint returns JSON data, this is important to remember.
            
            ## Getting Started
            - Install the SDK
            - Configure your credentials 
            - Make your first API call
            """,
            "expected_issues": ["apostrophe misuse", "wordiness", "passive voice", "comma splice", "missing oxford comma"]
        },
        {
            "title": "Business Email",
            "content": """
            Hey guys,
            
            I think this might possibly be a good solution for our companys needs. The report was 
            written by me last week. We gotta implement this ASAP.
            
            Let me know what you think.
            
            Thanks,
            John
            """,
            "expected_issues": ["informal language", "hedge words", "apostrophe error", "passive voice", "casual tone"]
        },
        {
            "title": "User Interface Text",
            "content": """
            Click the red button to delete your account. Required fields are shown in red.
            Enter your password to continue.
            """,
            "expected_issues": ["color-only information", "accessibility"]
        }
    ]
    
    for doc_num, document in enumerate(test_documents, 1):
        print(f"üìã Document {doc_num}: {document['title']}")
        print(f"Content Preview: {document['content'][:100]}...")
        print(f"Expected Issues: {', '.join(document['expected_issues'])}")
        print("\nüîç Analysis Results:")
        
        # Split content into sentences and analyze each
        sentences = _split_content_into_sentences(document['content'])
        total_suggestions = 0
        
        for i, sentence in enumerate(sentences[:5], 1):  # Limit to first 5 sentences
            if len(sentence.strip()) < 10:  # Skip very short sentences
                continue
                
            print(f"\n   Sentence {i}: \"{sentence[:50]}...\"")
            
            # Test different categories of issues
            categories_to_test = ['grammar', 'clarity', 'punctuation', 'accessibility', 'tone']
            
            for category in categories_to_test:
                # Simulate issue detection based on content
                detected_issues = _detect_issues_in_sentence(sentence, category)
                
                for issue in detected_issues:
                    suggestion = get_rag_suggestion(
                        issue_text=issue,
                        sentence_context=sentence,
                        category=category
                    )
                    
                    print(f"     ‚ö†Ô∏è {category.title()}: {issue}")
                    print(f"     üí° {suggestion.get('suggestion', 'No suggestion')[:100]}...")
                    total_suggestions += 1
        
        print(f"\nüìä Total Suggestions for {document['title']}: {total_suggestions}")
        print("-" * 80)
    
    print("\nüéØ Real Document Testing Complete!")

def _split_content_into_sentences(content: str) -> list:
    """Split content into sentences for analysis."""
    import re
    
    # Remove markdown formatting
    content = re.sub(r'[#*`\[\]()]', '', content)
    
    # Split into sentences
    sentences = re.split(r'[.!?]+', content)
    return [s.strip() for s in sentences if s.strip()]

def _detect_issues_in_sentence(sentence: str, category: str) -> list:
    """Detect potential issues in a sentence based on category."""
    issues = []
    sentence_lower = sentence.lower()
    
    if category == 'grammar':
        if 'was' in sentence_lower and 'by' in sentence_lower:
            issues.append('passive voice detected')
        if 'api\'s' in sentence_lower or 'companys' in sentence_lower:
            issues.append('incorrect apostrophe usage')
    
    elif category == 'clarity':
        if 'in order to' in sentence_lower:
            issues.append('wordy phrase detected')
        if any(word in sentence_lower for word in ['think', 'might', 'possibly', 'somewhat']):
            issues.append('hedge words detected')
        if 'implementation' in sentence_lower or 'decision' in sentence_lower:
            issues.append('nominalizations detected')
    
    elif category == 'punctuation':
        if ', they' in sentence_lower or ', this' in sentence_lower:
            issues.append('comma splice detected')
        if ' and ' in sentence and sentence.count(',') >= 2:
            issues.append('missing oxford comma')
    
    elif category == 'accessibility':
        if 'guys' in sentence_lower:
            issues.append('non-inclusive language')
        if 'red button' in sentence_lower or 'shown in red' in sentence_lower:
            issues.append('color-only information')
    
    elif category == 'tone':
        if any(word in sentence_lower for word in ['gotta', 'asap', 'awesome', 'cool']):
            issues.append('overly casual language')
    
    return issues

if __name__ == "__main__":
    test_with_sample_documents()
