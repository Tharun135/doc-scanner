# practical_integration_example.py
"""
Practical example showing how to integrate Enhanced RAG with existing DocScanner code.
This demonstrates the actual integration with your app/services/enrichment.py
"""
import os
import sys
import logging
from typing import Dict, Any, Optional

# Add the project root to the path
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.append(project_root)

# Import enhanced RAG components
from enhanced_rag_integration import (
    get_enhanced_rag_integration,
    enhanced_enrich_issue_with_solution,
    monitor_enhanced_rag_performance
)

logger = logging.getLogger(__name__)

def demonstrate_drop_in_replacement():
    """
    Show how to replace existing enrichment calls with enhanced versions.
    This is what you'd change in your actual app/services/enrichment.py
    """
    print("üîÑ Drop-in Replacement Demo")
    print("=" * 40)
    
    # Simulate issues from your existing rule detection
    detected_issues = [
        {
            "message": "Passive voice detected",
            "context": "The configuration file was updated by the administrator.",
            "issue_type": "passive-voice",
            "line_number": 15,
            "severity": "medium"
        },
        {
            "message": "Unnecessary adverb usage", 
            "context": "You can easily configure the system by simply following these steps.",
            "issue_type": "adverb-usage",
            "line_number": 23,
            "severity": "low"
        },
        {
            "message": "Click on pattern detected",
            "context": "Click on the Save button to store your changes.",
            "issue_type": "click-on",
            "line_number": 45,
            "severity": "low"
        }
    ]
    
    print(f"Processing {len(detected_issues)} detected issues...")
    
    enhanced_issues = []
    for issue in detected_issues:
        print(f"\nüìù Processing: {issue['message']}")
        print(f"   Original: \"{issue['context']}\"")
        
        # This is the enhanced replacement for your existing enrichment
        enhanced_issue = enhanced_enrich_issue_with_solution(issue)
        
        print(f"   ‚úÖ Suggested: \"{enhanced_issue.get('proposed_rewrite', 'N/A')}\"")
        print(f"   üìä Confidence: {enhanced_issue.get('confidence', 'N/A')}")
        print(f"   üîß Method: {enhanced_issue.get('method', 'N/A')}")
        
        # Show enhanced metadata that you now get
        if 'enhanced_metadata' in enhanced_issue:
            metadata = enhanced_issue['enhanced_metadata']
            print(f"   üìà Retrieval scores: {metadata.get('hybrid_scores', [])}")
            print(f"   üéØ Version: {metadata.get('version', 'N/A')}")
        
        enhanced_issues.append(enhanced_issue)
    
    return enhanced_issues

def demonstrate_batch_processing():
    """
    Show how to process multiple documents efficiently with enhanced RAG.
    """
    print("\nüìö Batch Processing Demo")
    print("=" * 40)
    
    # Simulate analyzing multiple documents
    documents = [
        {
            "filename": "user_manual.md",
            "content": """
# User Manual

## Getting Started
The system was designed to be intuitive. You can easily get started by simply following these instructions.

## Configuration
Click on the Settings button to access configuration options. The settings are managed by the administrator.
""",
            "document_type": "user_documentation"
        },
        {
            "filename": "api_reference.md", 
            "content": """
# API Reference

## Authentication
Authentication tokens are generated by the system automatically. Really secure tokens should be used for production.

## Error Handling
Errors are handled gracefully by the framework. Simply check the response status to verify success.
""",
            "document_type": "technical_documentation"
        }
    ]
    
    rag_integration = get_enhanced_rag_integration()
    
    all_enhanced_issues = []
    
    for doc in documents:
        print(f"\nüìÑ Analyzing: {doc['filename']}")
        
        # This would be your existing rule detection logic
        # For demo, we'll simulate finding issues
        simulated_issues = [
            {
                "message": "Passive voice detected",
                "context": "The system was designed to be intuitive.",
                "issue_type": "passive-voice",
                "source_file": doc['filename']
            },
            {
                "message": "Adverb usage detected",
                "context": "You can easily get started by simply following these instructions.",
                "issue_type": "adverb-usage", 
                "source_file": doc['filename']
            }
        ]
        
        # Process each issue with enhanced RAG
        for issue in simulated_issues:
            enhanced_issue = enhanced_enrich_issue_with_solution(issue)
            enhanced_issue['source_document'] = doc['filename']
            enhanced_issue['document_type'] = doc['document_type']
            all_enhanced_issues.append(enhanced_issue)
        
        print(f"   ‚úÖ Found and enhanced {len(simulated_issues)} issues")
    
    print(f"\nüìä Batch Results:")
    print(f"   Total documents: {len(documents)}")
    print(f"   Total issues enhanced: {len(all_enhanced_issues)}")
    
    # Show confidence distribution
    confidence_counts = {}
    for issue in all_enhanced_issues:
        conf = issue.get('confidence', 'unknown')
        confidence_counts[conf] = confidence_counts.get(conf, 0) + 1
    
    print(f"   Confidence distribution: {confidence_counts}")
    
    return all_enhanced_issues

def demonstrate_performance_monitoring():
    """
    Show how to monitor the enhanced RAG system performance.
    """
    print("\nüìä Performance Monitoring Demo")
    print("=" * 40)
    
    # Get comprehensive system statistics
    stats = monitor_enhanced_rag_performance()
    
    print("Current system performance:")
    print(f"  Enhanced RAG usage: {stats.get('enhanced_usage_rate', 0):.1%}")
    print(f"  Fallback usage: {stats.get('fallback_usage_rate', 0):.1%}")
    print(f"  Total processing calls: {stats.get('total_calls', 0)}")
    
    # Show vector store statistics
    if 'enhanced_metrics' in stats:
        vector_stats = stats['enhanced_metrics'].get('vector_store_stats', {})
        print(f"  Knowledge base size: {vector_stats.get('total_chunks', 0)} chunks")
        print(f"  Products covered: {vector_stats.get('unique_products', 0)}")
        print(f"  Rule categories: {vector_stats.get('unique_rule_tags', 0)}")
        
        # Performance metrics
        perf_stats = stats['enhanced_metrics'].get('performance_metrics', {})
        print(f"  Average response time: {perf_stats.get('avg_response_time', 0):.3f}s")
        print(f"  Cache hit rate: {perf_stats.get('cache_hits', 0)} hits")

def demonstrate_knowledge_base_expansion():
    """
    Show how to add new writing rules and guidelines to the enhanced RAG system.
    """
    print("\nüìñ Knowledge Base Expansion Demo")
    print("=" * 40)
    
    from enhanced_rag_integration import bulk_ingest_documents
    
    # Example: Adding new style guide content
    new_style_content = [
        {
            "id": "accessibility_guidelines",
            "product": "docscanner",
            "version": "2.0",
            "content": """
# Accessibility in Technical Writing

## Clear Language
Use simple, direct language. Avoid jargon when possible.
Define technical terms when first introduced.

## Structure
Use clear headings and logical organization.
Break up large blocks of text with subheadings.

## Instructions
Write step-by-step instructions in numbered lists.
Use active voice for clarity: "Click Save" not "The Save button should be clicked."
"""
        },
        {
            "id": "inclusive_language_guide",
            "product": "docscanner", 
            "version": "2.0",
            "content": """
# Inclusive Language Guidelines

## Gender-Neutral Language
Use "they/them" instead of "he/she" when referring to generic users.
Replace "guys" with "everyone" or "team."

## Avoiding Assumptions
Don't assume user knowledge levels.
Provide context for domain-specific terms.
"""
        }
    ]
    
    print("Adding new style guide content to knowledge base...")
    
    ingestion_stats = bulk_ingest_documents(new_style_content)
    
    print(f"‚úÖ Ingestion complete:")
    print(f"   Documents processed: {ingestion_stats['successful_ingestions']}/{ingestion_stats['total_documents']}")
    print(f"   New chunks created: {ingestion_stats['total_chunks']}")
    
    if ingestion_stats['errors']:
        print(f"   Errors encountered: {len(ingestion_stats['errors'])}")
    
    # Test retrieval of new content
    rag_integration = get_enhanced_rag_integration()
    
    test_query = "inclusive language gender neutral"
    if rag_integration.enhanced_system:
        results = rag_integration.enhanced_system.vector_store.query_enhanced(
            query_text=test_query,
            n_results=2
        )
        
        print(f"\nüîç Testing retrieval for '{test_query}':")
        for i, result in enumerate(results, 1):
            print(f"   {i}. {result['text'][:80]}...")
            metadata = result.get('metadata', {})
            print(f"      Source: {metadata.get('section_title', 'Unknown')}")

def main():
    """
    Run complete practical integration demonstration.
    """
    print("üöÄ Enhanced RAG - Practical Integration Example")
    print("=" * 60)
    print("This demo shows exactly how to integrate Enhanced RAG")
    print("with your existing DocScanner codebase.\n")
    
    # Run all demonstrations
    demonstrate_drop_in_replacement()
    demonstrate_batch_processing()
    demonstrate_performance_monitoring()
    demonstrate_knowledge_base_expansion()
    
    print("\nüéâ Integration Complete!")
    print("\nüí° To integrate with your existing code:")
    print("1. Replace enrichment calls in app/services/enrichment.py")
    print("2. Use enhanced_enrich_issue_with_solution() instead of enrich_issue_with_solution()")
    print("3. Monitor performance with monitor_enhanced_rag_performance()")
    print("4. Add new content with bulk_ingest_documents()")
    print("5. Tune parameters based on your specific use case")
    
    print(f"\nüìÅ Key Files:")
    print(f"   ‚Ä¢ enhanced_rag_integration.py - Main integration layer")
    print(f"   ‚Ä¢ enhanced_rag/ - Core enhanced RAG components")
    print(f"   ‚Ä¢ test_enhanced_rag_demo.py - Comprehensive testing")
    print(f"   ‚Ä¢ ENHANCED_RAG_SUMMARY.md - Complete implementation guide")

if __name__ == "__main__":
    main()
