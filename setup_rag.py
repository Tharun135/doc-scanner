#!/usr/bin/env python3
"""
Setup script for RAG integration with Gemini + LangChain
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(cmd, description):
    """Run a command and handle errors."""
    print(f"\nüîß {description}")
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} completed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error during {description.lower()}:")
        print(f"Command: {cmd}")
        print(f"Error: {e.stderr}")
        return False

def install_rag_dependencies():
    """Install RAG-specific dependencies."""
    print("üöÄ Installing RAG Dependencies for Gemini + LangChain Integration")
    print("=" * 60)
    
    # Check if we're in a virtual environment
    in_venv = hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)
    if not in_venv:
        print("‚ö†Ô∏è  Warning: Not in a virtual environment. It's recommended to use one.")
        response = input("Continue anyway? (y/N): ")
        if response.lower() != 'y':
            print("Installation cancelled.")
            return
    
    # Install RAG dependencies
    dependencies = [
        "langchain==0.1.5",
        "langchain-google-genai==0.0.8",
        "langchain-community==0.0.20",
        "chromadb==0.4.22",
        "faiss-cpu==1.7.4",
        "google-generativeai==0.3.2"
    ]
    
    for dep in dependencies:
        if not run_command(f"pip install {dep}", f"Installing {dep}"):
            print(f"‚ùå Failed to install {dep}")
            return False
    
    print("\n‚úÖ All RAG dependencies installed successfully!")
    return True

def setup_environment():
    """Setup environment variables."""
    print("\nüîß Setting up environment variables")
    
    env_file = Path(".env")
    
    # Read existing .env file if it exists
    existing_vars = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key] = value
    
    # Check for required environment variables
    required_vars = {
        'GOOGLE_API_KEY': 'Google Gemini API key (get from https://makersuite.google.com/app/apikey)',
        'OPENAI_API_KEY': 'OpenAI API key (get from https://platform.openai.com/api-keys)'
    }
    
    needs_update = False
    for var, description in required_vars.items():
        if var not in existing_vars or not existing_vars[var]:
            print(f"\nüìù Please set {var}")
            print(f"   Description: {description}")
            value = input(f"   Enter {var} (or press Enter to skip): ").strip()
            if value:
                existing_vars[var] = value
                needs_update = True
            else:
                print(f"   ‚ö†Ô∏è  Skipping {var} - you can set it later in .env file")
    
    # Write updated .env file
    if needs_update:
        with open(env_file, 'w') as f:
            f.write("# Environment variables for Doc Scanner with RAG\n")
            f.write("# Generated by setup_rag.py\n\n")
            for key, value in existing_vars.items():
                f.write(f"{key}={value}\n")
        print(f"\n‚úÖ Environment variables written to {env_file}")
    
    return True

def test_rag_system():
    """Test if RAG system can be imported and initialized."""
    print("\nüß™ Testing RAG system...")
    
    try:
        # Try to import the RAG system
        sys.path.insert(0, 'app')
        from rag_system import rag_system
        
        if rag_system.is_available():
            print("‚úÖ RAG system initialized successfully!")
            print(f"   - LangChain: Available")
            print(f"   - Gemini: {'Available' if rag_system.is_initialized else 'Not configured'}")
            return True
        else:
            print("‚ö†Ô∏è  RAG system is not fully available")
            print("   This might be due to missing API keys or dependencies")
            return False
            
    except ImportError as e:
        print(f"‚ùå Failed to import RAG system: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error testing RAG system: {e}")
        return False

def main():
    """Main setup function."""
    print("ü§ñ Doc Scanner RAG Integration Setup")
    print("=" * 40)
    print("This script will set up Gemini + LangChain RAG integration")
    print("for enhanced AI suggestions in your document scanner.\n")
    
    # Step 1: Install dependencies
    if not install_rag_dependencies():
        print("‚ùå Failed to install dependencies. Please check the errors above.")
        return False
    
    # Step 2: Setup environment
    if not setup_environment():
        print("‚ùå Failed to setup environment variables.")
        return False
    
    # Step 3: Test the system
    test_rag_system()
    
    print("\nüéâ RAG Integration Setup Complete!")
    print("\nNext steps:")
    print("1. Make sure your API keys are set in the .env file")
    print("2. Start your application: python run.py")
    print("3. Upload a document and try the AI suggestions")
    print("4. Look for the 'üß† RAG Enhanced' badge on AI suggestions")
    
    print("\nFeatures enabled:")
    print("‚Ä¢ Document context-aware suggestions")
    print("‚Ä¢ Writing guidelines knowledge base")
    print("‚Ä¢ Enhanced suggestion quality with retrieval")
    print("‚Ä¢ Source attribution for suggestions")
    
    return True

if __name__ == "__main__":
    main()
